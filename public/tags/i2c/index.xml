<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>I2c on Daniel Hacks It</title>
    <link>https://danielhacks.it/tags/i2c/</link>
    <description>Recent content in I2c on Daniel Hacks It</description>
    <generator>Hugo -- 0.147.5</generator>
    <language>en</language>
    <lastBuildDate>Sun, 15 Jun 2025 15:00:43 +0200</lastBuildDate>
    <atom:link href="https://danielhacks.it/tags/i2c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sine Synthesis with FPGA</title>
      <link>https://danielhacks.it/blog/20250608_sine_synthesis_on_fpga/</link>
      <pubDate>Sun, 15 Jun 2025 15:00:43 +0200</pubDate>
      <guid>https://danielhacks.it/blog/20250608_sine_synthesis_on_fpga/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Last time we did together a circuit using verilog to communicate to a I2S device. But we never delved into how to make a waveform for it.&lt;/p&gt;
&lt;p&gt;Now, don&amp;rsquo;t get me wrong: if you did the blinky led example while starting your first projects, this can be easily achievable for you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A square pattern is just zeros and ones&lt;/li&gt;
&lt;li&gt;A saw pattern is a counter from zero to max&lt;/li&gt;
&lt;li&gt;A triangle wave is a counter that goes back after hitting max or min values&lt;/li&gt;
&lt;li&gt;A sine wave is just some &lt;a href=&#34;https://en.wikipedia.org/wiki/CORDIC&#34;&gt;CORDIC&lt;/a&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we will not be using CORDIC and will not be doing simple counters. I want to show you a couple of tricks to generate a clean sine waveform that you can later compose to create more fancy sounds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Digital audio with I2S</title>
      <link>https://danielhacks.it/blog/20250608_digital_audio_with_i2s/</link>
      <pubDate>Sun, 08 Jun 2025 14:12:26 +0200</pubDate>
      <guid>https://danielhacks.it/blog/20250608_digital_audio_with_i2s/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As you perhaps know, I&amp;rsquo;m working on this blog also as a way to log my learning journey. So, to support the lack of interesting peripherals on the Arty A7, I bought a set of modules for Arduino. Most of them quite uninteresting, but I got this I2S DAC module from &lt;a href=&#34;https://www.adafruit.com/product/3678&#34;&gt;Adafruit&lt;/a&gt; that implements the UDA1334A from NXP (&lt;a href=&#34;https://www.nxp.com/docs/en/data-sheet/UDA1334ATS.pdf&#34;&gt;datasheet&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This device interest me the most among the ones I got from the assortment, because since I was a kid I wanted to make my own guitar effects (in fact, I believe many electronic engineers are born this way or similar), so the end goal is quite ambitious as you can see. But let&amp;rsquo;s start from something easy.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
